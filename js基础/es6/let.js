/**
 for循环的作用域 （）条件体是一个作用域 {}是一个作用域 每个作用域中可以声明命名相同的变量
 
 */

for (let i = 0; i < 5; i++) /** 作用域1*/ {
  /** 作用域2*/
  let i = 5;
  setTimeout(() => {
    console.log(i);
  }, 1000 * i);
}
/** 
如何理解for 循环中使用let 关键字声明变量会产生闭包
1： 循环几次，隐式产生几个块级作用域
2： 当前块级作用域没有i会向条件体中的代码块中查找i，并且保存到当前的作用域里面；
3： 定时器执行，回调函数中使用的是每个块级作用域中的i
*/
for (let i = 0; i < 5; i++) /** 作用域1*/ {
  /** 作用域2当中没有i就会查找外层作用域1中的i*/
  console.log(i);
  setTimeout(() => {
    console.log(i);
  }, 1000 * i);
}

/** 将i声明到全局 效果类似于var */
let i = 0;
for (; i < 5; i++) /** 作用域1*/ {
  /** 作用域2当中没有i就会查找外层作用域1中的i*/
  console.log(i);
  setTimeout(() => {
    console.log(i);
  }, 1000 * i);
}
